#!/bin/bash

#License:
#"Remote Syslog" is a free application what can be used to view syslog messages.
#Copyright (C) 2020 Tom Slenter
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#For more information contact the author:
#Name author: Tom Slenter
#E-mail: info@remotesyslog.com

#Variables
RSDEST=/opt/RS
SYSLOGCONF=/etc/syslog-ng/conf.d
APACONFIG=/etc/apache2/sites-available
RSBIN=/usr/bin

#Banner
function banner() {
    echo ""
    echo "#################################################"
    echo "#Remote Syslog X/C                              #"
    echo "#More information: remotesyslog.com             #"
    echo "#Remote Syslog installation                     #"
    echo "#Version: RSX 0.1                               #"
    echo "#Donate XRP: rHdkpJr3qYqBYY3y3S9ZMr4cFGpgP1eM6B #"
    echo "#################################################"
    echo ""
}

#Check if user is root
if ! [ $(id -u) = 0 ]; then
    clear
    banner
    echo "This installation must be run as root!"
    echo ""
    exit 1
fi

#Functions to check files, packages ...
function check_package() {
echo "Check package $1"
dpkg-query -l $1 > /dev/null 2>&1
if [ $? = 0 ]
then
    echo "Installation found ..."
else
    echo "Installation failed, abort (Hint: Did you install the core? ..."
    exit
fi
}

#Check if file exist
function check_file() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, continue installation ..."
    else
        echo "File: $1 does not exist, exit ..."
        exit
    fi
}

#Elastic only installation
function elasticinstall() {
#Check installation
    echo "Check if Raspberry Pi ..."
    drel="$(lsb_release -a | egrep 'Description:')"
    echo "$drel found ..."
    if [[ $drel =~ "Raspbian" ]]; then
        echo "Raspberry Pi detected ..."
        echo "It is slow ..."
    else
        echo "Continue ..."
    fi
    echo "Check if Remote Syslog Core is installed ..."
    check_file "$RSBIN/rsinstaller"
#Install packages
    echo "Install required packages ..."
    apt install libapache2-mod-authnz-external php apache2 libapache2-mod-authz-unixgroup php-cli libpam0g-dev php-pear php-dev libapache2-mod-php build-essential -y
    check_package "libapache2-mod-authnz-external"
    check_package "apache2"
    check_package "php"
    check_package "libapache2-mod-authz-unixgroup"
    check_package "php-cli"
    check_package "libapache2-mod-php"
    check_package "libpam0g-dev"
    check_package "php-pear"
    check_package "php-dev"
    check_package "build-essential"
#Load apache modules
    echo "Load modules ..."
    a2enmod proxy
    a2enmod proxy_http
    a2enmod headers
    a2enmod authnz_external
    a2enmod authz_unixgroup
    a2enmod rewrite
    a2enmod ssl
    a2enmod session
    a2enmod auth_form
    a2enmod request
    a2enmod session_cookie
    a2enmod session_crypto
#Elastic
    echo "Load Elastic ..."
    if [ -e "/etc/apt/sources.list.d/elastic-7.x.list" ]; then
        echo "Nothing to do ..."
    else
        wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
        apt-get install apt-transport-https -y
        echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-7.x.list
        echo "deb https://artifacts.elastic.co/packages/oss-7.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-7.x.list
    fi
    apt update && apt install elasticsearch liblog4j2-java -y
    check_package "elasticsearch"
    check_package "liblog4j2-java"
#Writing config
#RSX Syslog-ng config
    echo "Update syslog-ng with RSX config ..."
    cp $RSDEST/elastic_only/99RSX-rs.conf $SYSLOGCONF/99RSX-rs.conf
#RSX elastic config
    elc="$(cat /etc/elasticsearch/elasticsearch.yml | grep cluster.name:.syslog | head -n 1)"
    if [[ $elc == *"cluster.name: syslog"* ]]; then
        echo "Config already written ..."
    else
        echo "Write elastic config ..."
        echo "cluster.name: syslog" >> /etc/elasticsearch/elasticsearch.yml
        echo "node.name: syslog01" >> /etc/elasticsearch/elasticsearch.yml
    fi
#Activate service on boot
    echo "Activate startup log configuration ..."
    systemctl enable elasticsearch
#Reload services
    echo "Activate start/reload configuration ..."
    service elasticsearch start
    service syslog-ng restart
#Activate SSL
    echo "Activate SSL ..."
#Setup variables:
    varfullservername=$(host -TtA $(hostname -s)|grep "has address"|awk '{print $1}')
    certpath=/etc/cert
    echo "Create .rnd file ..."
    touch $HOME/.rnd
    echo "Certificate auto request for linux webservers!"
    echo "Powered by RSX ..."
    echo "Generate Certificate ..."
    if [ -f $HOME/.rnd ]; then
       echo "File $HOME/.rnd exists ..."
       openssl req -new -x509 -days 3650 -sha256 -newkey rsa:2048 -subj "/C=NL/ST=Limburg/L=Maastricht/O=IT/CN=$varfullservername" -nodes -keyout $HOME/$varfullservername.key -out $HOME/$varfullservername.crt
       echo "Copy SSL certificates ..."
       if [ -d $certpath ]; then
           echo "Directory already exist ..."
       else
           mkdir $certpath
           echo "Directory created ..."
       fi
       cp $HOME/$varfullservername.key $certpath/rs.key
       cp $HOME/$varfullservername.crt $certpath/rs.crt
       echo "Setup permissions ..."
       chmod 600 $certpath/rs.key
       echo "Clean up ..."
       rm -rf $HOME/$varfullservername.key
       rm -rf $HOME/$varfullservername.crt
       echo "Generated key file: $certpath/rs.key"
       echo "Generated cert file: $certpath/rs.crt"
       check_file $certpath/rs.key
       check_file $certpath/rs.crt
    else
       echo "No .rnd found ..."
    fi
#Proxy setup
    echo "Activate proxy ..."
    echo "Disable default config ..."
    cp -rf $RSDEST/elastic_only/eonly-apache.conf $APACONFIG/eonly-apache.conf
    check_file $APACONFIG/eonly-apache.conf
    a2ensite eonly-apache
    a2dissite 000-default
#Load services
    echo "Reload apache services ..."
    service apache2 restart
#Final message
    echo "RSX installation done ..."
}

elasticinstall
