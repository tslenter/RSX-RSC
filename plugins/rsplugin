#!/bin/bash

#License:
#"Remote Syslog" is a free application what can be used to view syslog messages.
#Copyright (C) 2020 Tom Slenter
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#For more information contact the author:
#Name author: Tom Slenter
#E-mail: info@remotesyslog.com

RSDESTP=/opt/RS/plugins
SYSLOGCONF=/etc/syslog-ng/conf.d
GEOCONF=/etc/GeoIP.conf
APACHCONF=/var/www/html
RSDEST=/opt/RS
APACHPHP=/etc/php/7.[0-9]/apache2

#Banner
function banner() {
    echo ""
    echo "#################################################"
    echo "#Remote Syslog X/C                              #"
    echo "#More information: remotesyslog.com             #"
    echo "#Remote Syslog plugins                          #"
    echo "#Version: RSX 0.1                               #"
    echo "#Donate XRP: rHdkpJr3qYqBYY3y3S9ZMr4cFGpgP1eM6B #"
    echo "#################################################"
    echo ""
    echo "The plugins are experimental and ONLY tested for RSX ..."
    echo "Use at your own risk ..."
    echo ""
}

#Check if user is root
if ! [ $(id -u) = 0 ]; then
    clear
    banner
    echo "This installation must be run as root!"
    echo ""
    exit 1
fi

#Functions to check files, packages ...
function check_package() {
echo "Check package $1"
dpkg-query -l $1 > /dev/null 2>&1
if [ $? = 0 ]
then
    echo "Installation found ..."
else
    echo "Installation failed, abort (Hint: Did you install the core? ..."
    exit
fi
}

#Check if file exist
function check_file() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, continue installation ..."
    else
        echo "File: $1 does not exist, exit ..."
        exit
    fi
}

#PHP authentication remove
function phpauthremove() {
    echo "Remove PHP Authentication ..."
    chmod o-r /etc/shadow
    rm -rf $APACHCONF/administrator/
    rm -rf $APACHPHP/conf.d/20-pam.ini
}

function phpauthinstall() {
#Checks
    echo "Check packages ..."
    check_package "apache2"
    check_package "build-essential"
    check_file $APACHCONF/logo.png
    check_file $APACHCONF/style.css
#Load PHP authentication module
    echo "Activate PHP PAM ..."
    echo "Compile ..."
    currentpath=$(pwd)
    cd $RSDEST/php-pam
    phpize
    ./configure --prefix=/usr
    make
    make install
    cd $currentpath
    ldconfig
#Setup php login experimental
    echo "Write php config ..."
    cp -rf $RSDEST/20-pam.ini $APACHPHP/conf.d/
    check_file $APACHPHP/conf.d/20-pam.ini
#Setup permissions on shadow file (Dangerous)
    echo "!Setup permissions /etc/shadow ...!"
    chmod o+r /etc/shadow
#Create login website
    echo "Create login for webpages ..."
    mkdir $APACHCONF/administrator/
    cp -rf $RSDEST/pamphplogin.php $APACHCONF/administrator/index.php
    cp -rf $RSDEST/profile.php $APACHCONF/administrator/profile.php
    check_file $APACHCONF/administrator/index.php
    check_file $APACHCONF/administrator/profile.php
    echo "Restart apache2 ..."
    service apache2 restart
}

#Check if database is corectly installed
function geo_check() {
    if [ -f /usr/share/GeoIP/GeoLite2-City.mmdb ]; then
        echo "Check database for IP: 1.2.3.4 ..."
        mmdblookup --file /usr/share/GeoIP/GeoLite2-City.mmdb --ip 1.2.3.4
        echo "Check done ..."
    else
        echo "No database found ..."
        exit
    fi
}

#Function for geo data
function geo() {
    echo "Install geo data module ..."
    sudo add-apt-repository ppa:maxmind/ppa -y
    apt update
    apt install geoipupdate mmdb-bin syslog-ng-mod-geoip2 -y
    echo ""
    echo ""
    echo "Instuction:"
    echo ""
    echo "Go to https://dev.maxmind.com/geoip/geoipupdate/ and create a account ..."
    echo "After that request a license and then continue ..."
    echo ""
    if [ -f $GEOCONF ]; then
        read -p 'Account ID: ' accountid
        read -p 'LicenseKey: ' licensekey
        if test "$accountid" = ""; then
            echo "Sorry, Account ID cannot be blank" >&2
            exit 1;
        fi
        if test "$licensekey" = ""; then
            echo "Sorry, License key cannot be blank" >&2
            exit 1;
        fi
        echo "Update configuration ..."
        sed -i "s|\AccountID.*|AccountID $accountid|" $GEOCONF
        sed -i "s|\LicenseKey.*|LicenseKey $licensekey|" $GEOCONF
        echo "Update database..."
        geoipupdate
        echo "Geo configuration updated with:"
        cat $GEOCONF | grep AccountID
        cat $GEOCONF | grep LicenseKey
    else
        echo "Configuration file not found ..."
    fi
}

#Function for geo data update
function geoupdate_rs() {
    if [ -f /usr/share/GeoIP/GeoLite2-City.mmdb ]; then
        echo "Update database... "
        geoipupdate
    else
        echo "No database found ..."
        exit
    fi
}

#Function for view cisco ACL
function ciscoconfig() {
    echo "Displaying default configuration ACL Cisco ..."
    echo ""
    cat $RSDESTP/cisco_acl_syslog-ng.conf
    exit
}

#Install ubiquiti parser
function ubiquiti_parser() {
    if [ -f /usr/share/GeoIP/GeoLite2-City.mmdb ]; then
        echo "Print config ..."
	cat $RSDESTP/99RSX-uni-ubi.conf
	echo ""
	read -p "Do you want to update the default RSX configuration with this one? y/n " -n 1 -r
	echo ""
	if [[ $REPLY =~ ^[Yy]$ ]]
	then
	    echo "Overwrite of default RSX file ..."
	    cp $RSDESTP/99RSX-uni-ubi.conf $SYSLOGCONF/99RSX-rs.conf
            echo "Update Elastic configuration ..."
            curl -X PUT http://127.0.0.1:9200/_template/rsx-syslog-ng -H 'Content-Type:application/json' -d '{
                "template":"rsx*",
                "settings": {
                "number_of_replicas": 1,
                "number_of_shards": 1
                },
                "mappings": {
                    "properties": {
                        "geoip2": {
                            "properties": {
                                "src.geo_point": {
                                "type": "geo_point"
                                },
                                "dst.geo_point": {
                                "type": "geo_point"
                                }
                            }
                        }
                    }
                }
            }'
            echo ""
            echo "Restart services ..."
            service syslog-ng restart
            echo ""
            cat $RSDESTP/99RSX-uni-ubi.txt
            echo ""
            echo "Done ..."
            exit
	else
	    echo "Exit ..."
            exit
	fi
    else
        echo "The configuration is not going to work, Geo location not found!"
    fi
}

#LOGSTASH ADDON
function logstash_install() {
    echo "Started logstash installation ..."
    chmod +x $RSDESTP/logstash/logstash_in
    $RSDESTP/logstash/logstash_in
    exit
}

function logstash_remove() {
    echo "Started logstash installation ..."
    chmod +x $RSDESTP/logstash/logstash_rm
    $RSDESTP/logstash/logstash_rm
    exit
}

clear
banner
#Menu
PS3='Please enter your choice: '
options=("Install Geo2 location data" "Update Geo2 location database" "Check Geo2 database" "Install/view ubiquiti/unifi config with Geo2" "Install PHP profile authentication - Info: Do not use ..." "Remove PHP profile auhentication - Info: Do not use ..." "Display example configuration Cisco ACL ..." "Install logstash ..." "Remove logstash ..." "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Install Geo2 location data")
            clear
            banner
            geo
            exit
    ;;
        "Update Geo2 location database")
            clear
            banner
            geoupdate_rs
            exit
    ;;

        "Check Geo2 database")
            clear
            banner
            geo_check
            exit
    ;;
        "Install/view ubiquiti/unifi config with Geo2")
            clear
            banner
            ubiquiti_parser
            exit
    ;;
        "Install PHP profile authentication - Info: Do not use ...")
            clear
            banner
            phpauthinstall
            exit
    ;;
        "Remove PHP profile auhentication - Info: Do not use ...")
            clear
            banner
            phpauthremove
            exit
    ;;
        "Display example configuration Cisco ACL ...")
            clear
            banner
            ciscoconfig
            exit
    ;;
        "Install logstash ...")
            clear
            banner
            logstash_install
            exit
    ;;
        "Remove logstash ...")
            clear
            banner
            logstash_remove
            exit
    ;;
        "Quit")
            break
    ;;
        *) echo "Invalid option $REPLY ..." ;;
    esac
done
