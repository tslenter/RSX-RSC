@define allow-config-dups 1
#Old Checkpoint config
destination d_http_cp {
  elasticsearch-http(
    frac_digits(3)
    index("checkpoint-rsx-${YEAR}-${MONTH}-${DAY}")
    type("_doc")
    url("http://localhost:9200/_bulk")
    persist-name("Default Checkpoint-NG log")
    template("$(format-json --scope rfc5424 --scope dot-nv-pairs --scope nv-pairs --key R_ISODATE @timestamp=${R_ISODATE})"));
};

#Checkpoint configuration
destination d_http_cp_vs {
  elasticsearch-http(
    frac_digits(3)
    index("checkpoint-ng-rsx-${YEAR}-${MONTH}-${DAY}")
    type("_doc")
    url("http://localhost:9200/_bulk")
    persist-name("Default Checkpoint-NG-VS log")
    template("$(format-json --scope rfc5424 --scope dot-nv-pairs --scope nv-pairs --key R_ISODATE @timestamp=${R_ISODATE})"));
};

#Optional filter values
#parser cp_p_kv {
#    kv-parser (value-separator(":") pair-separator(";"));
#};

#Optional additional parser
#parser p_kv_checkpoint {kv-parser(prefix("checkpoint.")); };

#Geo data
#Geo location filter
parser p_geoip2_dst_1 { geoip2( "${CP.dst}", prefix( "geoip2.dst." ) database( "/usr/share/GeoIP/GeoLite2-City.mmdb" ) ); };
parser p_geoip2_src_1 { geoip2( "${CP.src}", prefix( "geoip2.src." ) database( "/usr/share/GeoIP/GeoLite2-City.mmdb" ) ); };
parser p_geoip2_dst_2 { geoip2( "${CP_OLD.dst}", prefix( "geoip2.dst." ) database( "/usr/share/GeoIP/GeoLite2-City.mmdb" ) ); };
parser p_geoip2_src_2 { geoip2( "${CP_OLD.src}", prefix( "geoip2.src." ) database( "/usr/share/GeoIP/GeoLite2-City.mmdb" ) ); };

#Geo Rewrite
rewrite r_geoip2_dst {
    set(
        "${geoip2.dst.location.latitude},${geoip2.dst.location.longitude}",
        value( "geoip2.dst.geo_point" ),
        condition(not "${geoip2.dst.location.latitude}" == "")
    );
};

rewrite r_geoip2_src {
    set(
        "${geoip2.src.location.latitude},${geoip2.src.location.longitude}",
        value( "geoip2.src.geo_point" ),
        condition(not "${geoip2.src.location.latitude}" == "")
    );
};

#Set checkpoint source:
source cp_default_source_fw1 { network(flags(no-parse) transport("udp") port(5000)); };
source cp_default_source_fw2 { network(flags(no-parse) transport("udp") port(10000)); };

#Checkpoint 1 config
log {
    source(cp_default_source_fw1);
    parser { checkpoint-parser(prefix("CP_OLD.")); };
    parser(p_geoip2_src_1);
    parser(p_geoip2_src_2);
    rewrite(r_geoip2_src);
    parser(p_geoip2_dst_1);
    parser(p_geoip2_dst_2);
    rewrite(r_geoip2_dst);
    destination(d_http_cp);
    flags(flow-control);
};

#Checkpoint 2 config
log {
    source(cp_default_source_fw2);
    parser { checkpoint-parser(prefix("CP.")); };
    parser(p_geoip2_src_1);
    parser(p_geoip2_src_2);
    rewrite(r_geoip2_src);
    parser(p_geoip2_dst_1);
    parser(p_geoip2_dst_2);
    rewrite(r_geoip2_dst);
    destination(d_http_cp);
    flags(flow-control);
};
