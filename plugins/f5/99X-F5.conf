#F5 connector
source f5_7000 {
    network(
        transport("udp")
        port(7000)
    );
};

#F5 destination
destination d_http_f5 {
  elasticsearch-http(
    frac_digits(3)
    index("f5-lan-${YEAR}-${MONTH}-${DAY}")
    type("production")
    url("http://localhost:9200/_bulk")
    persist-name("Default F5 log")
    template("$(format-json --scope rfc5424 --scope dot-nv-pairs --scope nv-pairs --key R_ISODATE @timestamp=${R_ISODATE})"));
};

#F5 parser
parser f5_msg_monitor {
    csv-parser(
        #prefix(".F5.")
        columns("F5_MCPD_ID", "F5_UNIX_TIME", "", "F5_POOL_NAME", "", "F5_MEMBER", "", "", "F5_HOST_STATUS", "F5_POOL_STATUS")
        flags(strip-whitespace,greedy)
        delimiters(chars(" "))
        quote-pairs('""')
    );
};

parser f5_vs_status {
    csv-parser(
        #prefix(".F5.")
        columns("F5_MCPD_ID", "F5_UNIX_TIME", "", "", "F5_VS_NAME", "", "", "F5_VS_STATUS")
        flags(strip-whitespace,greedy)
        delimiters(chars(" "))
        quote-pairs('""')
    );
};

parser f5_va_monitor {
    csv-parser(
        #prefix(".F5.")
        columns("F5_MCPD_ID", "F5_UNIX_TIME", "", "", "F5_VA_NAME", "", "", "", "", "", "", "F5_VA_MONITOR_STATUS")
        flags(strip-whitespace,greedy)
        delimiters(chars(" "))
        quote-pairs('""')
    );
};

#F5 config
log {
  source(f5_7000);
  if (message('monitor status up.') or message('monitor status down.')) {
      parser(f5_msg_monitor);
      destination(d_http_f5);
      flags(flow-control);
  } elif (message('SNMP_TRAP: Virtual') and message('available') or message('unavailable')) {
      parser(f5_vs_status);
      destination(d_http_f5);
      flags(flow-control);
  } elif (message('Virtual Address') and message('UP') or message('DOWN')) {
      parser(f5_va_monitor);
      destination(d_http_f5);
      flags(flow-control);
  } else {
  destination(d_http_f5);
  flags(flow-control);
  };
};

#Additional configuration for F5 source logging virtual servers:
Create F5 pool:
create ltm pool RSX-HSL-LOGGING members add { <ip:port> <ip:port> } monitor gateway_icmp

#Create logging destinations:
Command 1: create /sys log-config destination remote-high-speed-log dest-hsl-logging distribution replicated pool-name RSX-HSL-LOGGING protocol udp
Command 2: create /sys log-config destination remote-syslog dest-syslog format rfc5424 remote-high-speed-log dest-hsl-logging
Command 3: create /sys log-config publisher publisher-remote-syslog destinations add { dest-syslog }

Create the following iRule:

when CLIENT_ACCEPTED {
    set rsx_hsl [HSL::open -publisher /Common/publisher-remote-syslog]
    HSL::send $rsx_hsl "Client connect from: [IP::client_addr]:[TCP::client_port]"
}
when CLIENT_CLOSED {
    unset rsx_hsl
}


#Apply irule to virtual server to monitor.

#Save configuration and sync if F5 setup is HA
run /cm config-sync to-group DEVICEGROUP-LB01
show /cm sync-status

#Example RSX Config - Syslog-NG

parser f5_src_debug {
    csv-parser(
        #prefix(".F5.")
        columns("", "", "", "", "SRC_IP_DEBUG", "SRC_PORT_DEBUG")
        flags(strip-whitespace,greedy)
        delimiters(chars(":"))
        quote-pairs('""')
    );
};

log {
  source(f5_7000);
  } elif (message('Client connect from:') and message('[F5@12276]')) {
      parser(f5_src_debug);
      destination(d_http_f5);
      flags(flow-control);
  } else {
  destination(d_http_f5);
  flags(flow-control);
  };
};
