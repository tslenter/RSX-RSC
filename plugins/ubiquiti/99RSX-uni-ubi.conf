#Update RSX configuration
destination d_http {
  elasticsearch-http(
    frac_digits(3)
    index("rsx-syslog-ng-${YEAR}-${MONTH}-${DAY}")
    type("_doc")
    url("http://localhost:9200/_bulk")
    persist-name("Default RSX log")
    template("$(format-json --scope rfc5424 --scope dot-nv-pairs --scope nv-pairs --key R_ISODATE @timestamp=${R_ISODATE})"));
};

#Geo location filter
parser p_geoip2_dst { geoip2( "${DST}", prefix( "geoip2.dst." ) database( "/var/lib/GeoIP/GeoLite2-City.mmdb" ) ); };
parser p_geoip2_src { geoip2( "${SRC}", prefix( "geoip2.src." ) database( "/var/lib/GeoIP/GeoLite2-City.mmdb" ) ); };

#Geo Rewrite
rewrite r_geoip2_dst {
    set(
        "${geoip2.dst.location.latitude},${geoip2.dst.location.longitude}",
        value( "geoip2.dst.geo_point" ),
        condition(not "${geoip2.dst.location.latitude}" == "")
    );
};

rewrite r_geoip2_src {
    set(
        "${geoip2.src.location.latitude},${geoip2.src.location.longitude}",
        value( "geoip2.src.geo_point" ),
        condition(not "${geoip2.src.location.latitude}" == "")
    );
};

#PARSER to filter unifi fields
parser edgemax_unifi {
    kv-parser (value-separator("="));
};

#Updated configuration RSX
log {
  source(udp_514);
  source (tcp_514);
  if (host('_gateway')) {
     parser(edgemax_unifi);
     parser(p_geoip2_src);
#    Activate when geoip2.src.location.latitude and geoip2.src.location.longitude are displayed.
     rewrite(r_geoip2_src);
     parser(p_geoip2_dst);
     rewrite(r_geoip2_dst);
     destination(d_http);
     flags(flow-control);
  } else {
  destination(d_http);
  flags(flow-control);
  };
};

#Create mapping within elastic
#curl -X PUT http://127.0.0.1:9200/_template/checkpoint-rsx -H 'Content-Type:application/json' -d '{
#    "template":"checkpoint-rsx*",
#    "settings": {
#    "number_of_replicas": 1,
#    "number_of_shards": 1
#    },
#    "mappings": {
#        "properties": {
#            "geoip2": {
#                "properties": {
#                    "src.geo_point": {
#                        "type": "geo_point"
#                    },
#                    "dst.geo_point": {
#                        "type": "geo_point"
#                    }
#                }
#            }
#        }
#    }
#}'

