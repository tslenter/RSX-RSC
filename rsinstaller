#!/bin/bash

#License:
#"Remote Syslog" is a free application what can be used to view syslog messages.
#Copyright (C) 2020 Tom Slenter
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#For more information contact the author:
#Name author: Tom Slenter
#E-mail: info@remotesyslog.com

#Variables
RSCONF=/opt/remotesyslog
RSPATH=$(pwd)
RSDEST=/opt/RS
SYSLOGCONF=/etc/syslog-ng/conf.d
APACHCONF=/var/www/html
APACONFIG=/etc/apache2/sites-available
VLOG=/var/log
RSBIN=/usr/bin
RSTMP=/tmp
APACHPHP=/etc/php/7.[0-9]/apache2
bid=00000050

#Banner
function banner() {
    echo ""
    echo "##################################################"
    echo "#Remote Syslog X/C                               #"
    echo "#More information: https://www.remotesyslog.com  #"
    echo "#Remote Syslog installation                      #"
    echo "#Version: RSX 0.1                                #"
    echo "#Donations: https://github.com/tslenter/RSX-RSC  #"
    echo "##################################################"
    echo ""
}

#Check if user is root
if ! [ $(id -u) = 0 ]; then
    clear
    banner
    echo "This installation must be run as root!"
    echo ""
    exit 1
fi

#Check build
function version() {
    if [ -e "$RSBIN/rsinstaller" ]; then
        fbid="$(sed -n -e '/bid/ s/.*\= *//p' $RSDEST/rsinstaller | head -n 1)"
        if [ -z ${fbid} ];
        then
            echo "Upgrade variable not found ..."
	    echo "${fbid}"
        else
            echo "Build ${fbid} found ..."
            if [ ${fbid} -le $bid ];
            then
                echo "This upgrade is not allowed ..."
                exit
            else
                echo "Upgrade detected ..."
            fi
        fi
    else
        echo "File: rsinstaller not found, is rsx/rsc installed ..."
        exit
    fi
}

#Functions to check files, packages ...
function check_package() {
echo "Check package $1"
dpkg-query -l $1 > /dev/null 2>&1
if [ $? = 0 ]
then
    echo "Installation found ..."
else
    echo "Installation failed, abort (Hint: Did you install the core? ..."
    exit
fi
}

#Check if file exist
function check_file() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, continue installation ..."
    else
        echo "File: $1 does not exist, exit ..."
        exit
    fi
}

#Check if debug module is activated
function mod_activ() {
    file=$1
    if [ -e "$file" ]; then
        echo "Module activated ..."
    else
        echo "Module not activated ..."
    fi
}

#Check files in reverse
function check_file_reverse() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, module already installed? Exiting ..."
        exit
    else
        echo "File: $1 does not exist, continue installation ..."
    fi
}

#Check file for GUI based functions
function check_file_gui() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, other GUI installed? Exiting ..."
        exit
    else
        echo "File: $1 does not exist, continue installation ..."
    fi
}

#Enroll functions
function rscinstall() {
#Check installation conflics ...
    echo "Check if RSX is installed ..."
    check_file_gui $SYSLOGCONF/99RSX-rs.conf
    echo "Check if RSC is installed ..."
    check_file_reverse $APACHCONF/rsc/index.php
#Install packages
    echo "Starting RSC installation ..."
    apt -y install apache2 apache2-utils php libapache2-mod-php libapache2-mod-authnz-external php apache2 libapache2-mod-authz-unixgroup php-cli libpam0g-dev php-pear php-dev libapache2-mod-php build-essential
    check_package "apache2"
    check_package "apache2-utils"
    check_package "php"
    check_package "libapache2-mod-php"
    check_package "libapache2-mod-authnz-external"
    check_package "libapache2-mod-authz-unixgroup"
    check_package "php-cli"
    check_package "libapache2-mod-php"
    check_package "libpam0g-dev"
    check_package "php-pear"
    check_package "php-dev"
    check_package "build-essential"
#Checks for php-pam build
    echo "Check packages ..."
    check_package "apache2"
    check_package "build-essential"
#Load PHP authentication module
    echo "Activate PHP PAM ..."
    echo "Compile ..."
    currentpath=$(pwd)
    cd $RSDEST/php-pam
    phpize
    ./configure --prefix=/usr
    make
    make install
    cd $currentpath
    ldconfig
#Setup php login experimental
    echo "Write php config ..."
    cp -rf $RSDEST/rsc/20-pam.ini $APACHPHP/conf.d/
    check_file $APACHPHP/conf.d/20-pam.ini
#Setup permissions on shadow file (Dangerous)
    echo "!Setup permissions /etc/shadow ...!"
    chmod o+r /etc/shadow
#Remove default webpage
    echo "Remove default GUI website ..."
    if [ -e "$APACHCONF/index.html" ]; then
        echo "File: $APACHCONF/index.html exists, remove file ..."
        rm -rf $APACHCONF/index.html
    else
        echo "File: $APACHCONF/index.html does not exist, continue installation ..."
    fi
#Create RSC directory
    echo "Add RSC website ..."
    echo "Create directory ..."
    mkdir $APACHCONF/rsc
#Copy RSC files
    echo "Copy files ..."
    cp -rf $RSDEST/rsc/favicon.ico $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/index.php $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/bootstrap.min.css $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/bootstrap.min.js $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/bootstrap-theme.min.css $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/html5shiv.min.js $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/jquery.min.js $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/jquery-ui.css $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/jquery-ui.min.js $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/logo_black.png $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/PHPTail.php $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/respond.min.js $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/rsc.php $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/logout.php $APACHCONF/rsc/
    cp -rf $RSDEST/rsc/login.php $APACHCONF/login.php
    cp -rf $RSDEST/rsc/rscforwarder.php $APACHCONF/index.php
    cp -rf $RSDEST/rsc/logo.png $APACHCONF/logo.png
    cp -rf $RSDEST/rsc/favicon.ico $APACHCONF/favicon.ico
    cp -rf $RSDEST/fontawesome $APACHCONF/fontawesome
    cp -rf $RSDEST/rsc/style.css $APACHCONF/style.css
    check_file_reverse $APACHCONF/index.html
    check_file $APACHCONF/login.php
    check_file $APACHCONF/index.php
    check_file $APACHCONF/logo.png
    check_file $APACHCONF/favicon.ico
    check_file $APACHCONF/style.css
    check_file $APACHCONF/fontawesome/css/all.css
    check_file $APACHCONF/rsc/favicon.ico
    check_file $APACHCONF/rsc/index.php
    check_file $APACHCONF/rsc/bootstrap.min.css
    check_file $APACHCONF/rsc/bootstrap.min.js
    check_file $APACHCONF/rsc/bootstrap-theme.min.css
    check_file $APACHCONF/rsc/html5shiv.min.js
    check_file $APACHCONF/rsc/jquery.min.js
    check_file $APACHCONF/rsc/jquery-ui.css
    check_file $APACHCONF/rsc/jquery-ui.min.js
    check_file $APACHCONF/rsc/logo_black.png
    check_file $APACHCONF/rsc/PHPTail.php
    check_file $APACHCONF/rsc/respond.min.js
    check_file $APACHCONF/rsc/rsc.php
    check_file $APACHCONF/rsc/logout.php
    echo "Set archive symlink ..."
    ln -s $VLOG/remote_syslog $APACHCONF/rsc/
#Load apache2 configuration and create SSL with authentication
    echo "Load apache2 configuration with SSL ..."
#Activate SSL
    echo "Activate SSL ..."
#Setup variables:
    varfullservername=$(host -TtA $(hostname -s)|grep "has address"|awk '{print $1}')
    certpath=/etc/cert
    echo "Create .rnd file ..."
    touch $HOME/.rnd
    echo "Certificate auto request for linux webservers!"
    echo "Powered by RSX ..."
    echo "Generate Certificate ..."
    if [ -f $HOME/.rnd ]; then
        echo "File $HOME/.rnd exists ..."
        openssl req -new -x509 -days 3650 -sha256 -newkey rsa:2048 -subj "/C=NL/ST=Limburg/L=Maastricht/O=IT/CN=$varfullservername" -nodes -keyout $HOME/$varfullservername.key -out $HOME/$varfullservername.crt
        echo "Copy SSL certificates ..."
        if [ -d $certpath ]; then
            echo "Directory already exist ..."
        else
            mkdir $certpath
            echo "Directory created ..."
        fi
        cp $HOME/$varfullservername.key $certpath/rs.key
        cp $HOME/$varfullservername.crt $certpath/rs.crt
        echo "Setup permissions ..."
        chmod 600 $certpath/rs.key
        echo "Clean up ..."
        rm -rf $HOME/$varfullservername.key
        rm -rf $HOME/$varfullservername.crt
        echo "Generated key file: $certpath/rs.key"
        echo "Generated cert file: $certpath/rs.crt"
        check_file $certpath/rs.key
        check_file $certpath/rs.crt
    else
       echo "No .rnd found ..."
    fi
#Webserver configuration
    echo "Activate website ..."
    cp -rf $RSDEST/rsc/rsc-apache.conf $APACONFIG/rsc-apache.conf
    check_file $APACONFIG/rsc-apache.conf
    a2ensite rsc-apache
    echo "Disable default config ..."
    a2dissite 000-default
#Load apache modules
    echo "Load modules ..."
    a2enmod rewrite
    a2enmod ssl
    service apache2 restart
    echo "Done ..."
}

function rscremove() {
#Check removal steps ...
    echo "Check if RSX is installed ..."
    check_file_gui $SYSLOGCONF/99RSX-rs.conf
    echo "Check if RSC is installed"
    check_file $APACHCONF/rsc/index.php
#Remove Apache files
    echo "Removing RSC website ..."
    rm -rf $APACHCONF/rsc/
#Check core install
    echo "Removing installation RSC ..."
    if [ -e "$RSBIN/rsinstaller" ]; then
        echo "Core still installed ..."
        apt -y purge apache2 apache2-utils php libapache2-mod-php libapache2-mod-authnz-external php apache2 libapache2-mod-authz-unixgroup php-cli libpam0g-dev php-pear php-dev libapache2-mod-php build-essential
        apt -y install syslog-ng
        apt -y autoremove
    else
        echo "No core found ..."
        apt -y purge apache2 apache2-utils php libapache2-mod-php libapache2-mod-authnz-external php apache2 libapache2-mod-authz-unixgroup php-cli libpam0g-dev php-pear php-dev libapache2-mod-php build-essential
        apt -y install rsyslog
        apt -y autoremove
    fi
#Remove Apache config and cleanup mess
    rm -rf $certpath/rs.key
    rm -rf $certpath/rs.crt
    rm -rf $APACONFIG/rsx-apache.conf
    rm -rf $APACHPHP/conf.d/20-pam.ini
    rm -rf $APACHCONF/*
#Remove PHP Authentication
    echo "Remove PHP authentication modules ..."
    chmod o-r /etc/shadow
    rm -rf $APACHPHP/conf.d/20-pam.ini
    echo "Done ..."
}

#Setup environment for installation
function debpackage() {
    echo "Check if Remote Syslog is installed ..."
    check_file_reverse $RSBIN/rsinstaller
    echo "Notice: This installation is tested for Ubuntu Server 18.04 LTS and Debian 10.x ..."
    echo "Starting installation ..."
    echo "Update installer cache ..."
    if apt-add-repository multiverse > /dev/null 2>&1 ; then
        printf 'Multiverse command succeeded\n'
        apt-add-repository multiverse
    else
        printf 'Multiverse not found ...\n'
    fi
    apt update
#Install syslog-ng
    echo "Checking dependencies ..."
    apt -y purge rsyslog
    apt -y install syslog-ng colortail wget logrotate grep tar
}

#Check if core is correctly installed
function checkinstallationcore() {
    echo "Check CLI application 1X ..."
    check_file $RSBIN/rsview
    echo "Check installer 1X ..."
    check_file $RSBIN/rsinstaller
    echo "Check logrotate 1X ..."
    check_file /etc/logrotate.d/remotelog
    echo "Check colortail 1X ..."
    check_file /etc/colortail/conf.colortail
    echo "Check syslog-ng 1X ..."
    check_file $SYSLOGCONF/99-remote.conf
    echo "Check remote_log dummy file 1X ..."
    check_file $VLOG/remote_syslog/remote_syslog.log
    echo "Check reconfiguration files 7X ..."
    check_file $RSCONF/syslog-ng
    check_file $RSCONF/logrotate
    check_file $RSCONF/colortail
    check_file $RSCONF/syslog-ngdefault
    check_file $RSCONF/logrotatedefault
    check_file $RSCONF/colortaildefault
    check_file $RSCONF/syslog-ng-localdefault
    echo "Optional: check if debug module is activated:"
    mod_activ $SYSLOGCONF/99-remote-local.conf
    exit
}

#Check minimum requirements
function pre_install() {
    echo "Check packages installations  ..."
    check_package "syslog-ng"
    check_package "colortail"
    check_package "wget"
    check_package "logrotate"
    check_package "grep"
    check_package "tar"
}

#Setup core install with textbased viewer
function coreinstall() {
    echo "Starting core installation ..."
    echo "Creating dummy remote_syslog file ..."
    mkdir $VLOG/remote_syslog/
    touch $VLOG/remote_syslog/remote_syslog.log
    echo "Set dummy remote_syslog file permissions ..."
    chown www-data:www-data $VLOG/remote_syslog/
    chown www-data:www-data $VLOG/remote_syslog/remote_syslog.log
    echo "Configuring syslog-ng ..."
    cp -rf $RSDEST/core/syslog-ng $SYSLOGCONF/99-remote.conf
    echo "Restart syslog-ng ..."
    service syslog-ng restart
    echo "Set logrotation ..."
    cp -rf $RSDEST/core/logrotate /etc/logrotate.d/remotelog
    echo "Activate colortail regex ..."
    cp -rf $RSDEST/core/colortail /etc/colortail/conf.colortail
    echo "Deploying application for CLI logging ..."
    cp -rf $RSDEST/rsview $RSBIN/rsview
    echo "Set permissions for CLI application ..."
    chmod +x $RSBIN/rsview
    echo "Deploying installer ..."
    cp -rf $RSDEST/rsinstaller $RSBIN/rsinstaller
    echo "Deploy config to $RSCONF/ ..."
    mkdir $RSCONF/
    cp -rf $RSDEST/core/syslog-ng $RSCONF/
    cp -rf $RSDEST/core/syslog-ng $RSCONF/syslog-ngdefault
    cp -rf $RSDEST/core/logrotate $RSCONF/
    cp -rf $RSDEST/core/logrotate $RSCONF/logrotatedefault
    cp -rf $RSDEST/core/colortail $RSCONF/
    cp -rf $RSDEST/core/colortail $RSCONF/colortaildefault
    cp -rf $RSDEST/core/syslog-ng-local $RSCONF/syslog-ng-localdefault
}

#Remove core and RSX or RSC (Complete deinstall)
function coreremove() {
    echo "Check if Remote Syslog is installed ..."
    check_file "$RSBIN/rsinstaller"
    echo "Starting core removal ..."
    echo "Configuring syslog-ng ..."
    rm -rf $SYSLOGCONF/99-remote.conf
    if [ -e "$SYSLOGCONF/99-remote-local.conf" ]; then
        rm -rf $SYSLOGCONF/99-remote-local.conf
    else
        echo "No local debug found ..."
    fi
    echo "Removing packages syslog-ng ..."
    apt -y purge syslog-ng colortail
    apt -y autoremove
    apt -y install rsyslog
    echo "Set logrotation ..."
    rm -rf /etc/logrotate.d/remotelog
    echo "Remove colortail regex ..."
    rm -rf /etc/colortail/conf.colortail
    echo "Remove application for CLI logging ..."
    rm -rf $RSBIN/rsview
    echo "Remove config to $RSCONF/ ..."
    rm -rf $RSCONF
    echo "Remove $RSDEST"
    rm -rf $RSDEST
    echo "Remove installer ..."
    rm -rf $RSBIN/rsinstaller
    echo "Move log files ..."
    cp -rf $VLOG/remote_syslog $VLOG/remote_syslog_uninstall && rm -rf $VLOG/remote_syslog
    echo "Moved files to $VLOG/remote_syslog_uninstall .."
    if [ -e "$APACHCONF/rsc/index.php" ]; then
        rscremove
    elif [ -e $SYSLOGCONF/99RSX-rs.conf ]; then
        rsxremove
    else
        echo "No GUI found, remove done ..."
        exit
    fi
}

#Upgrade function
function guiupgrade() {
    echo "Check if Remote Syslog is installed ..."
    check_file "$RSBIN/rsinstaller"
#Check packages
    if [ -e "$APACHCONF/rsc/index.php" ]; then
        check_file $APACHCONF/rsc/index.php
        echo "Starting installation legacy GUI ..."
        check_package "apache2"
        check_package "apache2-utils"
        check_package "php"
        check_package "libapache2-mod-php"
        check_package "apache2"
        check_package "apache2-utils"
        check_package "php"
        check_package "libapache2-mod-php"
        check_package "libapache2-mod-authnz-external"
        check_package "libapache2-mod-authz-unixgroup"
        check_package "php-cli"
        check_package "libapache2-mod-php"
        check_package "libpam0g-dev"
        check_package "php-pear"
        check_package "php-dev"
        check_package "build-essential"
#Update Webpage
        echo "Update webpage code ..."
        cp -rf $RSDEST/rsc/favicon.ico $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/index.php $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/bootstrap.min.css $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/bootstrap.min.js $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/bootstrap-theme.min.css $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/html5shiv.min.js $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/jquery.min.js $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/jquery-ui.css $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/jquery-ui.min.js $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/logo_black.png $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/PHPTail.php $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/respond.min.js $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/rsc.php $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/logout.php $APACHCONF/rsc/
        cp -rf $RSDEST/rsc/login.php $APACHCONF/login.php
        cp -rf $RSDEST/rsc/rscforwarder.php $APACHCONF/index.php
        cp -rf $RSDEST/rsc/logo.png $APACHCONF/logo.png
        cp -rf $RSDEST/rsc/favicon.ico $APACHCONF/favicon.ico
        cp -rf $RSDEST/fontawesome $APACHCONF/fontawesome
        cp -rf $RSDEST/rsc/style.css $APACHCONF/style.css
        check_file_reverse $APACHCONF/index.html
        check_file $APACHCONF/login.php
        check_file $APACHCONF/index.php
        check_file $APACHCONF/logo.png
        check_file $APACHCONF/favicon.ico
        check_file $APACHCONF/style.css
        check_file $APACHCONF/fontawesome/css/all.css
        check_file $APACHCONF/rsc/favicon.ico
        check_file $APACHCONF/rsc/index.php
        check_file $APACHCONF/rsc/bootstrap.min.css
        check_file $APACHCONF/rsc/bootstrap.min.js
        check_file $APACHCONF/rsc/bootstrap-theme.min.css
        check_file $APACHCONF/rsc/html5shiv.min.js
        check_file $APACHCONF/rsc/jquery.min.js
        check_file $APACHCONF/rsc/jquery-ui.css
        check_file $APACHCONF/rsc/jquery-ui.min.js
        check_file $APACHCONF/rsc/logo_black.png
        check_file $APACHCONF/rsc/PHPTail.php
        check_file $APACHCONF/rsc/respond.min.js
        check_file $APACHCONF/rsc/rsc.php
        check_file $APACHCONF/rsc/logout.php
        echo "Done ..."
        echo "Restarting Apache ..."
        service apache2 restart
        echo "Restarting Syslog-NG ..."
        service syslog-ng restart
        echo "Upgrade GUI done ..."
    elif [ -e $SYSLOGCONF/99RSX-rs.conf ]; then
        echo "Check packages ..."
        check_package "apache2"
        check_package "apache2-utils"
        check_package "php"
        check_package "libapache2-mod-php"
        check_package "apache2"
        check_package "apache2-utils"
        check_package "php"
        check_package "libapache2-mod-php"
        check_package "libapache2-mod-authnz-external"
        check_package "libapache2-mod-authz-unixgroup"
        check_package "php-cli"
        check_package "libapache2-mod-php"
        check_package "libpam0g-dev"
        check_package "php-pear"
        check_package "php-dev"
        check_package "build-essential"
        #Enable if required, but any custom apache2 config will be lost
        #echo "Copy new apache config ..."
        #cp -rf $RSDEST/rsx/rsx-apache.conf $APACONFIG/rsx-apache.conf
        #check_file $APACONFIG/rsx-apache.conf
        #echo "Update syslog-ng with RSX config ..."
        #cp $RSDEST/rsx/99RSX-rs.conf $SYSLOGCONF/99RSX-rs.conf
        check_file $SYSLOGCONF/99RSX-rs.conf
        cp -rf $RSDEST/rsx/login.php $APACHCONF/login.php
        cp -rf $RSDEST/rsx/rsxforwarder.php $APACHCONF/index.php
        cp -rf $RSDEST/rsx/logo.png $APACHCONF/logo.png
        cp -rf $RSDEST/rsx/favicon.ico $APACHCONF/favicon.ico
        cp -rf $RSDEST/fontawesome $APACHCONF/fontawesome
        cp -rf $RSDEST/rsx/style.css $APACHCONF/style.css
        check_file_reverse $APACHCONF/index.html
        check_file $APACHCONF/login.php
        check_file $APACHCONF/index.php
        check_file $APACHCONF/logo.png
        check_file $APACHCONF/favicon.ico
        check_file $APACHCONF/fontawesome/css/all.css
        check_file $APACHCONF/style.css
        echo "Restarting Apache ..."
        service apache2 restart
        echo "Restarting Syslog-NG ..."
        service syslog-ng restart
        echo "To upgrade the default config run the 'Restore default core configuration' option ..."
        echo "Warning this will override the plugin and custom configuration files ..."
        echo "Upgrade GUI done ..."
    else
        echo "No GUI found, upgrade done ..."
        exit
    fi
}

#Upgrade online
function upgrade() {
    echo "Check if Remote Syslog is installed ..."
    check_file $RSBIN/rsinstaller
    echo "Starting upgrade ..."
    echo "Download installation ..."
    git clone --branch master https://github.com/tslenter/RSX-RSC.git $RSTMP/rs
    echo "Check if download is successfull"
    if [ -d "$RSTMP/rs" ]; then
         echo "Continue installation ..."
    else
         echo "Clone not successfull ..."
         exit
    fi
    cp -rf $RSTMP/rs/* $RSDEST
    rm -rf $RSTMP/rs
    version
    echo "Start update ..."
    echo "Deploying application for CLI logging ..."
    cp -rf $RSDEST/rsview $RSBIN/rsview
    echo "Set permissions for CLI application ..."
    chmod +x $RSBIN/rsview
    echo "Deploying installer ..."
    cp -rf $RSDEST/rsinstaller $RSBIN/rsinstaller
    echo "Set permissions for installer ..."
    chmod +x $RSBIN/rsinstaller
    echo "Set new default core configuration in $RSCONF/ ..."
    cp -rf $RSDEST/core/syslog-ng $RSCONF/syslog-ngdefault
    cp -rf $RSDEST/core/logrotate $RSCONF/logrotatedefault
    cp -rf $RSDEST/core/colortail $RSCONF/colortaildefault
    echo "Copy upgrade file to $RSTMP/ ..."
    cp -rf $RSDEST/extraupgrade $RSTMP/extraupgrade
    chmod +x $RSTMP/extraupgrade
    $RSTMP/extraupgrade
    echo "Remove update file ..."
    rm -rf $RSTMP/extraupgrade
    echo "Remove upgrade folder ..."
    rm -rf $RSTMP/rs
    echo "Restart syslog-ng ..."
    service syslog-ng restart
    guiupgrade
}

#Upgrade platform
function osupdate() {
    echo "Start OS update ..."
    apt update && apt upgrade -y
    apt autoremove -y
    if [ -e /etc/kibana/kibana.yml ]; then
        echo "RSX Kibana found ..."
        echo "Restart services ..."
        service kibana stop
        service kibana start
    else
        echo "Nothing to do"
    fi
}

function changedefault() {
    echo "Reconfigure default values ..."
    cp -rf $RSCONF/syslog-ng $SYSLOGCONF/99-remote.conf
    echo "Restart syslog-ng ..."
    service syslog-ng restart
    echo "Set logrotation ..."
    cp -rf $RSCONF/logrotate /etc/logrotate.d/remotelog
    echo "Activate colortail regex ..."
    cp -rf $RSCONF/colortail /etc/colortail/conf.colortail
}

function restoredefault() {
    echo "Restore default syslog-ng values..."
    cp -rf $RSCONF/syslog-ngdefault $SYSLOGCONF/99-remote.conf
    echo "Restart syslog-ng ..."
    service syslog-ng restart
    echo "Restore default logrotation ..."
    cp -rf $RSCONF/logrotatedefault /etc/logrotate.d/remotelog
    echo "Restore default colortail regex ..."
    cp -rf $RSCONF/colortaildefault /etc/colortail/conf.colortail
    read -p "Do you want to reset RSX configuration? y/n " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo "Restore default RSX configuration ..."
        cp -rf $RSDEST/rsx/rsx-apache.conf $APACONFIG/rsx-apache.conf
        cp $RSDEST/rsx/99RSX-rs.conf $SYSLOGCONF/99RSX-rs.conf
    else
        echo "Done ..."
    fi
}

#Activate debug for rsview
function startdebug() {
    echo "Activate local syslog for debug ..."
    cp -rf $RSCONF/syslog-ng-localdefault $SYSLOGCONF/99-remote-local.conf
    echo "Restart syslog-ng ..."
    service syslog-ng restart
}

#Stop debug for rsview
function stopdebug() {
   echo "Deactivate local syslog for debug ..."
   rm -rf $SYSLOGCONF/99-remote-local.conf
   echo "Restart syslog-ng ..."
   service syslog-ng restart
}

#FIX for larger RSC searches
function extentphplimit() {
    echo "Extent PHP limit to 512M ..."
    check_file $APACHPHP/php.ini
    echo "Setting PHP limit to 512M ..."
    sed -i '/memory_limit/c\\memory_limit = 512M' $APACHPHP/php.ini
    echo "Restarting webservices ..."
    service apache2 restart
}

#Restore FIX for larger RSC searches
function restorephplimit() {
    echo "Restoring PHP limit to default values 128M ..."
    check_file $APACHPHP/php.ini
    echo "Setting PHP limit to 128M ..."
    sed -i '/memory_limit/c\\memory_limit = 128M' $APACHPHP/php.ini
    echo "Restarting webservices ..."
    service apache2 restart
}

#Installation RSX
function rsxinstall() {
#Check installation
    echo "Check if Raspberry Pi ..."
    drel="$(lsb_release -a | egrep 'Description:')"
    echo "$drel found ..."
    if [[ $drel =~ "Raspbian" ]]; then
        echo "Raspberry Pi detected, RSX unsupported ..."
        echo "It is to slow and is missing some packages ..."
        echo "Abort ..."
        exit
    else
        echo "Continue ..."
    fi
    echo "Check GUI ..."
    check_file_gui $APACHCONF/rsc/index.php
    check_file_reverse $SYSLOGCONF/99RSX-rs.conf
    echo "Check if Remote Syslog is installed ..."
    check_file "$RSBIN/rsinstaller"
#Install packages
    echo "Install required packages ..."
    apt install libapache2-mod-authnz-external php apache2 libapache2-mod-authz-unixgroup php-cli libpam0g-dev php-pear php-dev libapache2-mod-php build-essential -y
    check_package "libapache2-mod-authnz-external"
    check_package "apache2"
    check_package "php"
    check_package "libapache2-mod-authz-unixgroup"
    check_package "php-cli"
    check_package "libapache2-mod-php"
    check_package "libpam0g-dev"
    check_package "php-pear"
    check_package "php-dev"
    check_package "build-essential"
#Load apache modules
    echo "Load modules ..."
    a2enmod proxy
    a2enmod proxy_http
    a2enmod headers
    a2enmod authnz_external
    a2enmod authz_unixgroup
    a2enmod rewrite
    a2enmod ssl
    a2enmod session
    a2enmod auth_form
    a2enmod request
    a2enmod session_cookie
    a2enmod session_crypto
#Elastic
    echo "Load Elastic ..."
    if [ -e "/etc/apt/sources.list.d/elastic-7.x.list" ]; then
        echo "Nothing to do ..."
    else
        wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
        apt-get install apt-transport-https -y
        echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-7.x.list
        echo "deb https://artifacts.elastic.co/packages/oss-7.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-7.x.list
    fi
    apt update && apt install elasticsearch liblog4j2-java -y
    check_package "elasticsearch"
    check_package "liblog4j2-java"
#Install Kibana
    echo "Install Kibana ..."
    apt update && apt install kibana -y
#Writing config
#RSX Syslog-ng config
    echo "Update syslog-ng with RSX config ..."
    cp $RSDEST/rsx/99RSX-rs.conf $SYSLOGCONF/99RSX-rs.conf
#RSX elastic config
    elc="$(cat /etc/elasticsearch/elasticsearch.yml | grep cluster.name:.syslog | head -n 1)"
    if [[ $elc == *"cluster.name: syslog"* ]]; then
        echo "Config already written ..."
    else
        echo "Write elastic config ..."
        echo "cluster.name: syslog" >> /etc/elasticsearch/elasticsearch.yml
        echo "node.name: syslog01" >> /etc/elasticsearch/elasticsearch.yml
    fi
#RSX kibana config
    kic="$(cat /etc/kibana/kibana.yml | grep server.rewriteBasePath:.true | head -n 1)"
    if [[ $kic == *"server.rewriteBasePath: true"* ]]; then
        echo "Config already written ..."
    else
        echo "Write kibana config ..."
        echo 'server.rewriteBasePath: true' >> /etc/kibana/kibana.yml
        echo 'server.basePath: "/kibana"' >> /etc/kibana/kibana.yml
    fi
#Activate service on boot
    echo "Activate startup log configuration ..."
    systemctl enable kibana
    systemctl enable elasticsearch
#Reload services
    echo "Activate start/reload configuration ..."
    service elasticsearch start
    service kibana start
    service syslog-ng restart
#Activate SSL
    echo "Activate SSL ..."
#Setup variables:
    varfullservername=$(host -TtA $(hostname -s)|grep "has address"|awk '{print $1}')
    certpath=/etc/cert/
    echo "Create .rnd file ..."
    touch $HOME/.rnd
    echo "Certificate auto request for linux webservers!"
    echo "Powered by RSX ..."
    echo "Generate Certificate ..."
    if [ -f $HOME/.rnd ]; then
        echo "File $HOME/.rnd exists ..."
        openssl req -new -x509 -days 3650 -sha256 -newkey rsa:2048 -subj "/C=NL/ST=Limburg/L=Maastricht/O=IT/CN=$varfullservername" -nodes -keyout $HOME/$varfullservername.key -out $HOME/$varfullservername.crt
        echo "Copy SSL certificates ..."
        if [ -d $certpath ]; then
            echo "Directory already exist ..."
        else
            mkdir $certpath
            echo "Directory created ..."
        fi
       cp $HOME/$varfullservername.key $certpath/rs.key
       cp $HOME/$varfullservername.crt $certpath/rs.crt
       echo "Setup permissions ..."
       chmod 600 $certpath/rs.key
       echo "Clean up ..."
       rm -rf $HOME/$varfullservername.key
       rm -rf $HOME/$varfullservername.crt
       echo "Generated key file: $certpath/rs.key"
       echo "Generated cert file: $certpath/rs.crt"
       check_file $certpath/rs.key
       check_file $certpath/rs.crt
    else
       echo "No .rnd found ..."
    fi
#Proxy setup
    echo "Activate proxy ..."
    echo "Disable default config ..."
    cp -rf $RSDEST/rsx/rsx-apache.conf $APACONFIG/rsx-apache.conf
    check_file $APACONFIG/rsx-apache.conf
    a2ensite rsx-apache
    a2dissite 000-default
#Remove default webpage
    echo "Remove default GUI website ..."
    if [ -e "$APACHCONF/index.html" ]; then
        echo "File: $APACHCONF/index.html exists, remove file ..."
        rm -rf $APACHCONF/index.html
    else
        echo "File: $APACHCONF/index.html does not exist, continue installation ..."
    fi
#Create login website
    echo "Create login for webpages ..."
    cp -rf $RSDEST/rsx/login.php $APACHCONF/login.php
    cp -rf $RSDEST/rsx/rsxforwarder.php $APACHCONF/index.php
    cp -rf $RSDEST/rsx/logo.png $APACHCONF/logo.png
    cp -rf $RSDEST/rsx/favicon.ico $APACHCONF/favicon.ico
    cp -rf $RSDEST/fontawesome $APACHCONF/fontawesome
    cp -rf $RSDEST/rsx/style.css $APACHCONF/style.css
    check_file_reverse $APACHCONF/index.html
    check_file $APACHCONF/login.php
    check_file $APACHCONF/index.php
    check_file $APACHCONF/logo.png
    check_file $APACHCONF/favicon.ico
    check_file $APACHCONF/style.css
    check_file $APACHCONF/fontawesome/css/all.css
    echo "Reload apache services ..."
    service apache2 restart
#Final message
    echo "RSX installation done ..."
}

#RSX removal
function rsxremove() {
#Basic check
    check_file_gui $APACHCONF/rsc/index.php
    check_file $SYSLOGCONF/99RSX-rs.conf
#Remove Syslog-NG RSX config
    rm -rf $SYSLOGCONF/99RSX-rs.conf
    echo "Restart Syslog-NG ..."
    service syslog-ng restart
#Remove Apache config
    rm -rf $certpath/rs.key
    rm -rf $certpath/rs.crt
    rm -rf $APACONFIG/rsx-apache.conf
    rm -rf $APACHPHP/conf.d/20-pam.ini
    rm -rf $APACHCONF/*
#Remove packages
    echo "Remove config ..."
    rm -rf /etc/apt/sources.list.d/elastic-7.x.list
    rm -rf /etc/elasticsearch/elasticsearch.yml
    rm -rf /etc/kibana/kibana.yml
    echo "Remove packages ..."
    apt -y purge kibana elasticsearch liblog4j2-java libapache2-mod-authnz-external php apache2 libapache2-mod-authz-unixgroup php-cli libpam0g-dev php-pear php-dev libapache2-mod-php build-essential -y
    apt -y install syslog-ng
    apt -y autoremove
    echo "RSX removed ..."
}

#Thank you message
function quit() {
    echo "Thank you for using Remote Syslog ..."
}

function fwenable() {
    echo "Install package ufw ..."
    apt install -y ufw
    echo "Activation of ufw rules ..."
    check_package "ufw"
    echo "Setting firewall rules ..."
    ufw allow 22/tcp
    ufw allow 8080/tcp
    ufw allow 80/tcp
    ufw allow 443/tcp
    ufw allow 514/tcp
    ufw allow 514/udp
    ufw --force enable
    ufw status
    echo "Done ..."
}

function fwdisable() {
    check_package "ufw"
    echo "Disable firewall rules ..."
    ufw disable
    ufw status
    echo "Done ..."
}

function status() {
    dpkg-query -l syslog-ng > /dev/null 2>&1
    if [ $? = 0 ]
    then
        echo "Installation found ..."
        service syslog-ng status | cat
    else
        echo "Installation not found, skipped ..."
    fi
    dpkg-query -l apache2 > /dev/null 2>&1
    if [ $? = 0 ]
    then
        echo "Installation found ..."
        service apache2 status | cat
    else
        echo "Installation not found, skipped ..."
    fi
    dpkg-query -l elasticsearch > /dev/null 2>&1
    if [ $? = 0 ]
    then
        echo "Installation found ..."
        service elasticsearch status | cat
    else
        echo "Installation not found, skipped ..."
    fi
    dpkg-query -l kibana > /dev/null 2>&1
    if [ $? = 0 ]
    then
        echo "Installation found ..."
        service kibana status | cat
    else
        echo "Installation not found, skipped ..."
    fi
    dpkg-query -l ufw > /dev/null 2>&1
    if [ $? = 0 ]
    then
        ufwcheck2="$(dpkg-query -l ufw | egrep '<none>')"
        if [[ $ufwcheck2 =~ "<none>" ]]; then
            echo "ufw missing ..."
        else
            echo "Installation found ..."
            ufw status
        fi
    else
        echo "Installation not found, skipped ..."
    fi
    echo "Done ..."
}

function ubntrepofix() {
#Syslog-ng
    echo "Update repository's ..."
    echo "Load syslog-ng ..."
    echo "Check if ARM ..."
    drel="$(uname -a | egrep 'aarch64')"
    echo "$drel found ..."
    if [[ $drel =~ "aarch64" ]]; then
        echo "ARM detected ..."
        echo "Apply fix ..."
        sudo echo "" > /etc/apt/sources.list.d/syslog-ng.list
    else
        echo "Continue ..."
    fi
    if [ -e "/etc/apt/sources.list.d/syslog-ng.list" ]; then
        echo "Nothing to do ..."
    else
        wget -qO - https://download.opensuse.org/repositories/home:/laszlo_budai:/syslog-ng/xUbuntu_18.04/Release.key | /usr/bin/apt-key add -
        echo deb http://download.opensuse.org/repositories/home:/laszlo_budai:/syslog-ng/xUbuntu_18.04 ./ > /etc/apt/sources.list.d/syslog-ng.list
        apt update
        apt auto-remove -y
#If upgrade is triggered
        apt install syslog-ng -y
        check_package "syslog-ng"
    fi
}

#Release check
function distocheck() {
    echo "Check release ..."
    drel="$(lsb_release -a | egrep 'Codename:')"
    echo "$drel found ..."
    if [[ $drel =~ "buster" ]]; then
        debvarcheck
    elif [[ $drel =~ "sid" ]]; then
        debvarcheck
    elif [[ $drel =~ "bionic" ]]; then
        echo "Ubuntu found ..."
        ubntrepofix
        echo "Done ..."
    else
        echo "No distro detected ..."
        exit
    fi
}

function debvarcheck() {
    echo "Debian found ..."
    echo "Update debian path ..."
    PATH="/usr/sbin:$PATH"
    echo "Install ufw ..."
    fwcheck=$(dpkg-query -l ufw)
    if [[ $fwcheck =~ "ufw" ]]; then
        echo "Going for check 2 ..."
        ufwcheck2="$(dpkg-query -l ufw | egrep '<none>')"
        if [[ $ufwcheck2 =~ "<none>" ]]; then
            echo "ufw missing ..."
            apt install ufw -y
        else
            echo "Installation found ..."
        fi
    else
        echo "ufw missing ..."
        apt install ufw -y
    fi
    if [ -e "/etc/apt/sources.list.d/91-debian-unstable.list" ]; then
        echo "Nothing to do ..."
    else
        apt install gnupg -y
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 04EE7237B7D453EC
        echo "deb http://mirror.yandex.ru/debian/ unstable main" | tee -a /etc/apt/sources.list.d/91-debian-unstable.list
        echo "deb-src http://mirror.yandex.ru/debian/ unstable main" | tee -a /etc/apt/sources.list.d/91-debian-unstable.list
    fi
}

#Setup kibana for first use
function kibdef() {
    check_package "kibana"
    curlcheck="$(dpkg-query -l curl | egrep '<none>')"
    if [[ $curlcheck =~ "<none>" ]]; then
        echo "curl missing ..."
        apt install curl -y
    else
        echo "Installation found ..."
    fi
    check_package "curl"
    echo "Wait 60 sec for API activation ..."
    for i in {60..01};
        do $l;
        echo -n "$i ";
        sleep 1;
    done
    urlstatus="$(curl -XGET http://localhost:5601/kibana/status -I | egrep 200)"
    if [[ $urlstatus =~ "200" ]]; then
        echo "Kibana 200 code found ..."
        echo "Trying to setup kibana for first use ..."
        echo "Send test message ..."
        rsview -t
        echo "Activate darkmodes ..."
        curl -XPOST -H "Content-Type: application/json" -H "kbn-xsrf: true" localhost:5601/kibana/api/kibana/settings/theme:darkMode -d '{"value": "true"}'
        echo "Set index for Kibana ..."
        curl -X POST "http://localhost:5601/kibana/api/saved_objects/index-pattern/rsx-syslog-ng*" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d'
        {
            "attributes": {
            "title": "rsx-syslog-ng*",
            "timeFieldName": "ISODATE"
            }
        }
        '
        echo ""
        echo "Enable default lifecycle to RSX index ..."
        curl -X PUT http://127.0.0.1:9200/_ilm/policy/rsx-default -H 'Content-Type:application/json' -d '{
            "policy": {
               "phases": {
               "hot": {
                   "min_age": "0ms",
                   "actions": {}
               },
               "delete": {
                   "min_age": "10d",
                   "actions": {
                       "delete": {}
                        }
                    }
                }
            }
        }'
        curl -X PUT http://127.0.0.1:9200/_template/rsx-syslog-ng -H 'Content-Type:application/json' -d '{
            "template":"rsx-syslog-ng*",
            "settings": {
            "number_of_replicas": 1,
            "number_of_shards": 1,
            "index.lifecycle.name": "rsx-default",
            "index.lifecycle.rollover_alias": "rsx-syslog-ng"
            }
        }'
        echo ""
        echo "Done ..."
    else
        echo "Kibana not in time activated? Use GUI to setup kibana ..."
    fi
}

function plugins(){
    echo "Check plugins/fixes requirments ..."
    #Check disabled
    #check_file $RSBIN/rsinstaller
    echo "Plugins/fixes are experimental check configuration before installation ..."
    while true; do
    read -p "Do you wish to continue? y/n: " yn
    case $yn in
        [Yy]* ) break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
    esac
    done
    echo "Check if directory exist ..."
    if [ -d $RSDEST/plugins ]; then
        $RSDEST/plugins/rsplugin
    else
        echo "No plugin directory found ..."
        echo "Exit ..."
        exit
    fi
}

#Elastic only installation
function elasticonlyinstall() {
    $RSDEST/elastic_only/elasticsearch_in
}

#Elastic only removal
function elasticonlyremove() {
    $RSDEST/elastic_only/elasticsearch_rm
}

#Environment setup
clear
echo "Setting up environment ..."
echo "Check 1 ..."
if [ -e $RSPATH/rsinstaller ]; then
    echo "rsinstaller found in local directory, copy to $RSDEST started ..."
    if [ -d $RSDEST ]; then
        echo "Directory already exist ..."
    else
        mkdir $RSDEST
        echo "Directory created ..."
    fi
    cp -rf $RSPATH/* $RSDEST
elif [ -e $RSBIN/rsinstaller ]; then
    echo "rsinstaller run from $RSBIN, going for $RSDEST environment ..."
else
    echo "Did you run the installer from the right directory? ..."
fi

clear
banner
#Menu
PS3='Please enter your choice: '
options=("Core installation" "Core removal" "Upgrade RSX/RSC" "Reconfigure core services" "Restore default core configuration" "Add local syslog to Remote Syslog core" "Remove local syslog to Remote Syslog core" "Set new memory PHP limit of 512M" "Set default PHP memory limit of 128M" "Install RSC" "Remove RSC" "Install RSX" "Remove RSX" "Install elasticsearch" "Remove elasticsearch" "Enable firewall" "Disable firewall" "OS Upgrade" "Plugins/fixes (Experimental ...)" "Status RS" "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Core installation")
            clear
            banner
            distocheck
            debpackage
            pre_install
            coreinstall
            checkinstallationcore
            exit
    ;;
        "Core removal")
            clear
            banner
            distocheck
            coreremove
            exit
    ;;
        "Upgrade RSX/RSC")
            clear
            banner
            distocheck
            pre_install
            upgrade
            osupdate
            checkinstallationcore
            exit
    ;;
        "Reconfigure core services")
            clear
            banner
            distocheck
            changedefault
            exit
    ;;
        "Restore default core configuration")
            clear
            banner
            distocheck
            restoredefault
            exit
    ;;
        "Add local syslog to Remote Syslog core")
            clear
            banner
            distocheck
            startdebug
            exit
    ;;
        "Remove local syslog to Remote Syslog core")
            clear
            banner
            distocheck
            stopdebug
            exit
    ;;
        "Set new memory PHP limit of 512M")
            clear
            banner
            distocheck
            extentphplimit
            exit
    ;;
        "Set default PHP memory limit of 128M")
            clear
            banner
            distocheck
            restorephplimit
            exit
    ;;
        "Install RSC")
            clear
            banner
            distocheck
            pre_install
            rscinstall
            exit
    ;;
        "Remove RSC")
            clear
            banner
            distocheck
            rscremove
            exit
    ;;
        "Install RSX")
            clear
            banner
            distocheck
            pre_install
            rsxinstall
            kibdef
            exit
    ;;
        "Remove RSX")
            clear
            banner
            distocheck
            rsxremove
            exit
    ;;
        "Install elasticsearch")
            clear
            banner
            distocheck
            pre_install
            elasticonlyinstall
            exit
    ;;
        "Remove elasticsearch")
            clear
            banner
            distocheck
            elasticonlyremove
            exit
    ;;
       "Enable firewall")
            clear
            banner
            distocheck
            fwenable
            exit
    ;;
        "Disable firewall")
            clear
            banner
            distocheck
            fwdisable
            exit
    ;;
        "OS Upgrade")
            clear
            banner
            distocheck
            osupdate
            exit
    ;;
        "Plugins/fixes (Experimental ...)")
            clear
            banner
            distocheck
            plugins
            exit
    ;;
        "Status RS")
            clear
            banner
            distocheck
            status
            exit
    ;;
        "Quit")
            break
    ;;
        *) echo "Invalid option $REPLY ..." ;;
    esac
done
